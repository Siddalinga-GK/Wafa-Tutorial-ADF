{
	"name": "IncrementalKeys",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_allemp",
						"type": "DatasetReference"
					},
					"name": "Allemp"
				},
				{
					"dataset": {
						"referenceName": "DS_emp",
						"type": "DatasetReference"
					},
					"name": "emp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Sinlemp",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Dummy"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          deptid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Allemp",
				"source(output(",
				"          name as string,",
				"          country as string,",
				"          deptid as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"Allemp derive(dummy = 'dummy') ~> Dummy",
				"Dummy aggregate(groupBy(dummy),",
				"     maxid = max(empid)) ~> aggregate1",
				"aggregate1, emp join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(empid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(empid = toInteger(empid)+toInteger(maxid)) ~> derivedColumn1",
				"derivedColumn1 derive(empid = toString(empid),",
				"          deptid = toString(deptid)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          empid,",
				"          name,",
				"          country,",
				"          deptid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"Allemp, select1 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          deptid as string",
				"     ),",
				"     partitionFileNames:['Employee.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          country,",
				"          deptid",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}